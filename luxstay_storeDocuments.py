import requests
import time
import random
import os
from mongoengine import *

# define a collection schema to store the data of each document
class Apartment(Document):
    apartment_id = IntField(required=True)
    name = StringField(max_length=200)
    num_bedrooms = IntField(min_value=0)
    num_bathrooms = IntField(min_value=0)
    num_beds = IntField(min_value=0)
    area = StringField()
    maximum_guests = IntField(min_value=0)
    rating = IntField(min_value=0)
    review_count = IntField(min_value=0)
    like_count = IntField(min_value=0)
    bedType_name = StringField(max_length=50, required=True)
    roomType_name = StringField(max_length=50, required=True)
    propertyType_name = StringField(max_length=50, required=True)
    nightly_price_vnd = FloatField(min_value=0, required=True)
    ward = StringField(max_length=100)
    district = StringField(max_length=100)
    city = StringField(max_length=50)
    latitude = FloatField(required=True)
    longitude = FloatField(required=True)
    amenities = ListField(field=StringField(max_length=50))

# put data into mongo
username = 'root'
password = 'root'
host = 'localhost'
port = 27017
# for mongoengine, /?authSource=admin must be appended after port
connection_str = f'mongodb://{username}:{password}@{host}:{port}/?authSource=admin'
connect('example', host=connection_str)

# get all ids from file generated by luxstay1.py
with open('data/apartment_ids_hcm.txt', 'r') as input:
    ids_generator = (val.replace('\n', '') for val in input)
    apartment_ids = set(ids_generator)

# get all ids from file generated by luxstay1.py
used_ids = set()
if os.path.getsize('used_ids.txt'):
    with open('used_ids.txt', 'r') as input:
        ids_generator = (val.replace('\n', '') for val in input)
        used_ids.update(set(ids_generator))

# remove used ids from current set of ids
apartment_ids -= used_ids

cnt = 0
total_ids = len(apartment_ids)
# for each id, get all required data
for id in apartment_ids:
    cnt += 1
    print(f'Record#{cnt}/{total_ids}, ID:{id}')

    url =f'https://www.luxstay.com/api/rooms/{id}'
    resp = requests.get(url)
    if resp.raise_for_status() is None:
        json_data = resp.json().get('data')

        # getting useful data
        apartment_id = json_data.get('id')
        name = json_data.get('name')
        num_bedrooms = json_data.get('num_bedrooms')
        num_bathrooms = json_data.get('num_bathrooms')
        num_beds = json_data.get('num_beds')
        area = json_data.get('area')
        maximum_guests = json_data.get('maximum_guests')
        rating = json_data.get('rating')
        review_count = json_data.get('review_count')
        like_count = json_data.get('like_count')

        if json_data.get('bedType'):
            bedType_name = json_data.get('bedType').get('data').get('name')
        else:
            bedType_name = ''

        if json_data.get('roomType'):
            roomType_name = json_data.get('roomType').get('data').get('name')
        else:
            roomType_name = ''

        if json_data.get('propertyType'):
            propertyType_name = json_data.get('propertyType').get('data').get('name')
        else:
            propertyType_name = ''

        nightly_price_vnd = json_data.get('price').get('data').get('nightly_price_vnd')

        if json_data.get('address'):
            ward = json_data.get('address').get('data').get('area')
            district = json_data.get('address').get('data').get('city')
            city = json_data.get('address').get('data').get('state')
            latitude = float(json_data.get('address').get('data').get('latitude'))
            longitude = float(json_data.get('address').get('data').get('longitude'))
        else:
            ward, district, city, latitude, longitude = '', '', '', 0.0, 0.0
        amenities_data = json_data.get('amenities').get('data')

        apartment_data = Apartment(
            apartment_id = apartment_id,
            name = name,
            num_bedrooms = num_bedrooms,
            num_bathrooms = num_bathrooms,
            num_beds = num_beds,
            area = area,
            maximum_guests = maximum_guests,
            rating = rating,
            review_count = review_count,
            like_count = like_count,
            bedType_name = bedType_name,
            roomType_name = roomType_name,
            propertyType_name = propertyType_name,
            nightly_price_vnd = nightly_price_vnd,
            ward = ward,
            district = district,
            city = city,
            latitude = latitude,
            longitude = longitude,
            amenities = [amenity.get('name') for amenity in amenities_data]
        )
        apartment_data.save()
        with open('used_ids.txt', 'a+') as output:
            output.write(f'{id}\n')

    time.sleep(random.uniform(0.1, 0.5))

